---
description:
globs:
alwaysApply: true
---

Je compte faire le projet avec Spring Boot pour l'instant et par la suite j'envisagerai peut etre de tester le meme projet en Nest Js. C'est donc pourquoi pour l'instant on va développer le projet spring boot dans un sous dossier ./spring-boot attention à ne pas se tromper lors d'execution de commandes dans le terminal. 


# Objectif du projet

Mettre en place une API REST pour gérer un tableau de type Kanban.
Aucune interface frontend n’est demandée. La documentation Swagger servira d’interface pour tester les routes.

L’API doit couvrir les fonctionnalités suivantes :

Utilisateurs

Inscrire un nouvel utilisateur (POST /api/auth/register)

Connecter un utilisateur (POST /api/auth/login)

Modifier les informations d’un utilisateur, y compris ses droits (PATCH /api/users/{id})

Listes

Créer une nouvelle liste (POST /api/lists)

Supprimer une liste (DELETE /api/lists/{id})

Cartes

Créer une carte dans une liste (POST /api/lists/{listId}/cards)

Modifier une carte (titre, description, etc.) (PATCH /api/cards/{id})

Supprimer une carte (DELETE /api/cards/{id})

Documentation

Fournir un point d’entrée Swagger (ex : /api) listant et documentant tous les endpoints.

# Technologies imposées par la consigne

Un des frameworks : NestJS, Symfony, ou Spring Boot

Documentation API : Swagger / OpenAPI

Dans ce projet, le choix est fait : Spring Boot.


# Étapes de développement attendues

Créer un projet Spring Boot avec les dépendances nécessaires :

Spring Web

Spring Data JPA

Spring Security (gestion des utilisateurs + rôles)

springdoc-openapi-starter-webmvc-ui (Swagger)

Base de données (H2 pour tests ou PostgreSQL/MySQL en prod)

Définir les modèles principaux :

User (id, email, password, roles, etc.)

List (id, title, position, ownerId, etc.)

Card (id, title, description, position, listId, etc.)

Implémenter les contrôleurs REST avec les routes listées ci-dessus.

Configurer la sécurité JWT pour protéger les endpoints.

Ajouter et tester la documentation Swagger.

# Rendu attendu

Le code source sur GitHub

Un fichier rapport-veille-back.pdf (comparaison des technos + justification du choix)

Un README clair expliquant comment lancer le projet et tester l’API

